{
    "$id": "https://github.com/edatasheets/digital-datasheets/blob/main/part-spec/clocks/oscillator.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "oscillator",
    "type": "object",
    "required": [
        "frequency"
    ],
    "properties": {
        "baseResonator": {
            "description": "technology producing resonance",
            "type": "string",
            "enum": [
                "crystal", 
                "mems",
                "silicon"
            ]
        },
        "frequency": {
            "description": "output frequency of oscillator",
            "$comment": "units of hertz",
            "$ref": "../common/unit.json#/unit"
        },
        "frequencyStability": {
            "description": "Frequency change over temperature, load, supply voltage change and aging",
            "$comment": "units of ppm",
            "$ref": "../common/unit.json#/unit"
        },
        "currentConsumption": {
            "description": "current consumption of a device",
            "comment": "units of amps",
            "$ref": "../common/currentConsumption.json#/currentConsumption"
        },
        "outputLoad": {
            "description": "maxium capacitive load that can be supported by oscillator",
            "comment": "units of farads",
            "$ref": "../common/unit.json#/unit"
        },
        "riseTime": {
            "description": "time for output to go from 10% to 90% of output max",
            "comment": "units of seconds",
            "$ref": "../common/unit.json#/unit"
        },
        "fallTime": {
            "description": "time for output to go from 90% to 10% of output max",
            "comment": "units of seconds",
            "$ref": "../common/unit.json#/unit"
        },
        "startUpTime": {
            "description": "time between enable and output reaching 10% of output max",
            "comment": "units of seconds",
            "$ref": "../common/unit.json#/unit"
        },
        "dutyCycle": {
            "description": "time above 50% of output max over entire period",
            "comment": "units of percent",
            "$ref": "../common/unit.json#/unit"
        },
        "phaseJitter": {
            "description": "variation of waveform period",
            "comment": "units of seconds",
            "$ref": "../common/conditionalProperty.json#/conditionalProperty"
        },
        "pins": {
			"description": "array of pin objects with associated properties",
			"type": "array",
			"items": {
				"$ref": "../common/pinSpec.json#/pinSpec"
			}
		},
		"package": {
			"description": "component package information",
			"$ref": "../common/package.json#/package"
		},
		"externalFileMap": {
			"description": "external files that describe key component properties. External files can be used in lieu of defining core properties, pins, and package informatoin in the same file",
			"$ref": "#/$defs/externalFileMap"
		},
        "componentID": {
			"description": "methods for identifying the version of the digital datasheet",
			"$ref": "../common/componentID.json"
		}
    },
	"$defs": {
		"externalFileMap": {
			"type": "object",
			"properties": {
				"coreProperties": {
					"description": "core component properties as defined by the specific component spec file. These properties are described by the common part of the part number",
					"example": "this might include everything about an MCU other than flash size",
					"$ref": "../common/externalFile.json"
				},
				"additionalCoreProperities": {
					"description": "core component properties as defined by the specific component spec file. These properties are described by the changing part of the part number",
					"example": "this might include the MCU flash size",
					"$ref": "../common/externalFile.json"
				},
				"pins": {
					"description": "pin properties specified by the pin spec file",
					"$ref": "../common/externalFile.json"
				},
				"package": {
					"description": "package information specified by the package spec file",
					"$ref": "../common/externalFile.json"
				}
			}
		}
	}
}
